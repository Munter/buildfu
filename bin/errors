#!/usr/bin/env node

var optimist = require('optimist'),
    commandLineOptions = optimist
        .usage('$0 [options] http://yoursite.com')
        .options('r', {
            alias: 'recursive',
            describe: 'Follows links around the site to check other urls than the single one supplied',
            type: 'boolean',
            default: false
        })
        .options('p', {
            alias: 'parents',
            describe: 'Include parent directories up until the domain',
            type: 'boolean',
            default: false
        })
        .options('v', {
            alias: 'verbose',
            describe: 'Output files as they are resolved',
            type: 'boolean',
            default: false
        })
        .options('h', {
            alias: 'help',
            describe: 'Show this help',
            type: 'boolean',
            default: false
        })
        .wrap(72)
        .argv,
    url = require('url').parse(commandLineOptions._[0]),
    errors = [];

if (!url.href || commandLineOptions.help) {
    optimist.showHelp();
    process.exit(1);
}

var AssetGraph = require('assetgraph'),
    query = AssetGraph.query,
    colors = require('colors'),
    path = require('path'),
    follow;
/*
{
    protocol: 'http:',
    slashes: true,
    auth: 'munter:123456',
    host: 'www.fumle.dk',
    hostname: 'www.fumle.dk',
    href: 'http://munter:123456@www.fumle.dk/path/to/file.extension',
    pathname: '/path/to/file.extension',
    path: '/path/to/file.extension'
}
*/

require('../lib/registerTransforms');


new AssetGraph({
        root: url.href,
        defaultResolver: 'http'
    })
    .on('error', function (err) {
        if (commandLineOptions.verbose) {
            console.log('\u2714 '.red + err.message);
        }
        errors.push(err);
    })
    .on('addAsset', function (asset) {
        if (commandLineOptions.verbose && asset._url) {
            console.log('\u2717 '.green + asset._url);
        }
    })

    // Set up the graph and populate it
    .registerRequireJsConfig()
    .loadAssets(url.href)

    // First graph the page
    .populate({
        followRelations: query.not({
            type: 'HtmlAnchor'
        })
    })

    // Then decent into lower levels
    .if(commandLineOptions.recursive)
        .populate({
            followRelations: query.not({
                type: 'HtmlAnchor',
                href: function (url) {
                    if (/:\/\//.test(url)) {
                        // Relative url showing protocol. That means we're outside the domain
                        return true;
                    }
                    if (/^\.\.\//.test(url)) {
                        return !commandLineOptions.parents;
                    }
                    return false;
                }
            })
        })
    .endif()


    // LessCss.js
    .compileLessToCss({type: 'Less'})
    .populate({from: {type: 'Css'}})

    .run(function () {
        if (errors.length > 0) {
            console.error('Errors:');
            errors.forEach(function (err) {
                console.error(err.message.red)
            });
            process.exit(1);
        }
    });
